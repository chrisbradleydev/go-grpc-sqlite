// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: protos/pokemon.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PokemonService_AddPokemon_FullMethodName        = "/pokemon.PokemonService/AddPokemon"
	PokemonService_GetPokemonByName_FullMethodName  = "/pokemon.PokemonService/GetPokemonByName"
	PokemonService_GetPokemonByType_FullMethodName  = "/pokemon.PokemonService/GetPokemonByType"
	PokemonService_GetAllPokemon_FullMethodName     = "/pokemon.PokemonService/GetAllPokemon"
	PokemonService_DeletePokemonById_FullMethodName = "/pokemon.PokemonService/DeletePokemonById"
	PokemonService_PokemonExists_FullMethodName     = "/pokemon.PokemonService/PokemonExists"
)

// PokemonServiceClient is the client API for PokemonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PokemonServiceClient interface {
	AddPokemon(ctx context.Context, in *AddPokemonRequest, opts ...grpc.CallOption) (*Pokemon, error)
	GetPokemonByName(ctx context.Context, in *PokemonNameRequest, opts ...grpc.CallOption) (*Pokemon, error)
	GetPokemonByType(ctx context.Context, in *PokemonTypeRequest, opts ...grpc.CallOption) (*PokemonList, error)
	GetAllPokemon(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PokemonList, error)
	DeletePokemonById(ctx context.Context, in *DeletePokemonRequest, opts ...grpc.CallOption) (*Empty, error)
	PokemonExists(ctx context.Context, in *PokemonNameRequest, opts ...grpc.CallOption) (*PokemonExistsResponse, error)
}

type pokemonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPokemonServiceClient(cc grpc.ClientConnInterface) PokemonServiceClient {
	return &pokemonServiceClient{cc}
}

func (c *pokemonServiceClient) AddPokemon(ctx context.Context, in *AddPokemonRequest, opts ...grpc.CallOption) (*Pokemon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pokemon)
	err := c.cc.Invoke(ctx, PokemonService_AddPokemon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokemonServiceClient) GetPokemonByName(ctx context.Context, in *PokemonNameRequest, opts ...grpc.CallOption) (*Pokemon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pokemon)
	err := c.cc.Invoke(ctx, PokemonService_GetPokemonByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokemonServiceClient) GetPokemonByType(ctx context.Context, in *PokemonTypeRequest, opts ...grpc.CallOption) (*PokemonList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PokemonList)
	err := c.cc.Invoke(ctx, PokemonService_GetPokemonByType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokemonServiceClient) GetAllPokemon(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PokemonList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PokemonList)
	err := c.cc.Invoke(ctx, PokemonService_GetAllPokemon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokemonServiceClient) DeletePokemonById(ctx context.Context, in *DeletePokemonRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PokemonService_DeletePokemonById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokemonServiceClient) PokemonExists(ctx context.Context, in *PokemonNameRequest, opts ...grpc.CallOption) (*PokemonExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PokemonExistsResponse)
	err := c.cc.Invoke(ctx, PokemonService_PokemonExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PokemonServiceServer is the server API for PokemonService service.
// All implementations must embed UnimplementedPokemonServiceServer
// for forward compatibility.
type PokemonServiceServer interface {
	AddPokemon(context.Context, *AddPokemonRequest) (*Pokemon, error)
	GetPokemonByName(context.Context, *PokemonNameRequest) (*Pokemon, error)
	GetPokemonByType(context.Context, *PokemonTypeRequest) (*PokemonList, error)
	GetAllPokemon(context.Context, *Empty) (*PokemonList, error)
	DeletePokemonById(context.Context, *DeletePokemonRequest) (*Empty, error)
	PokemonExists(context.Context, *PokemonNameRequest) (*PokemonExistsResponse, error)
	mustEmbedUnimplementedPokemonServiceServer()
}

// UnimplementedPokemonServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPokemonServiceServer struct{}

func (UnimplementedPokemonServiceServer) AddPokemon(context.Context, *AddPokemonRequest) (*Pokemon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPokemon not implemented")
}
func (UnimplementedPokemonServiceServer) GetPokemonByName(context.Context, *PokemonNameRequest) (*Pokemon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPokemonByName not implemented")
}
func (UnimplementedPokemonServiceServer) GetPokemonByType(context.Context, *PokemonTypeRequest) (*PokemonList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPokemonByType not implemented")
}
func (UnimplementedPokemonServiceServer) GetAllPokemon(context.Context, *Empty) (*PokemonList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPokemon not implemented")
}
func (UnimplementedPokemonServiceServer) DeletePokemonById(context.Context, *DeletePokemonRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePokemonById not implemented")
}
func (UnimplementedPokemonServiceServer) PokemonExists(context.Context, *PokemonNameRequest) (*PokemonExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PokemonExists not implemented")
}
func (UnimplementedPokemonServiceServer) mustEmbedUnimplementedPokemonServiceServer() {}
func (UnimplementedPokemonServiceServer) testEmbeddedByValue()                        {}

// UnsafePokemonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PokemonServiceServer will
// result in compilation errors.
type UnsafePokemonServiceServer interface {
	mustEmbedUnimplementedPokemonServiceServer()
}

func RegisterPokemonServiceServer(s grpc.ServiceRegistrar, srv PokemonServiceServer) {
	// If the following call pancis, it indicates UnimplementedPokemonServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PokemonService_ServiceDesc, srv)
}

func _PokemonService_AddPokemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPokemonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokemonServiceServer).AddPokemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PokemonService_AddPokemon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokemonServiceServer).AddPokemon(ctx, req.(*AddPokemonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PokemonService_GetPokemonByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PokemonNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokemonServiceServer).GetPokemonByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PokemonService_GetPokemonByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokemonServiceServer).GetPokemonByName(ctx, req.(*PokemonNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PokemonService_GetPokemonByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PokemonTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokemonServiceServer).GetPokemonByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PokemonService_GetPokemonByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokemonServiceServer).GetPokemonByType(ctx, req.(*PokemonTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PokemonService_GetAllPokemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokemonServiceServer).GetAllPokemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PokemonService_GetAllPokemon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokemonServiceServer).GetAllPokemon(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PokemonService_DeletePokemonById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePokemonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokemonServiceServer).DeletePokemonById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PokemonService_DeletePokemonById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokemonServiceServer).DeletePokemonById(ctx, req.(*DeletePokemonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PokemonService_PokemonExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PokemonNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokemonServiceServer).PokemonExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PokemonService_PokemonExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokemonServiceServer).PokemonExists(ctx, req.(*PokemonNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PokemonService_ServiceDesc is the grpc.ServiceDesc for PokemonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PokemonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pokemon.PokemonService",
	HandlerType: (*PokemonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPokemon",
			Handler:    _PokemonService_AddPokemon_Handler,
		},
		{
			MethodName: "GetPokemonByName",
			Handler:    _PokemonService_GetPokemonByName_Handler,
		},
		{
			MethodName: "GetPokemonByType",
			Handler:    _PokemonService_GetPokemonByType_Handler,
		},
		{
			MethodName: "GetAllPokemon",
			Handler:    _PokemonService_GetAllPokemon_Handler,
		},
		{
			MethodName: "DeletePokemonById",
			Handler:    _PokemonService_DeletePokemonById_Handler,
		},
		{
			MethodName: "PokemonExists",
			Handler:    _PokemonService_PokemonExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/pokemon.proto",
}
